{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 12.2.0-3ubuntu1) 12.2.0\nPyTorch: 1.10.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2+cu113\nOpenCV: 4.5.4\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.24.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/train.json',\n        img_prefix='data/balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=25, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1890971447, "exp_name": "balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "segm_mAP": 0.002, "segm_mAP_50": 0.007, "segm_mAP_75": 0.001, "segm_mAP_s": 0.0, "segm_mAP_m": 0.005, "segm_mAP_l": 0.002, "segm_mAP_copypaste": "0.002 0.007 0.001 0.000 0.005 0.002"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "segm_mAP": 0.002, "segm_mAP_50": 0.008, "segm_mAP_75": 0.001, "segm_mAP_s": 0.0, "segm_mAP_m": 0.005, "segm_mAP_l": 0.002, "segm_mAP_copypaste": "0.002 0.008 0.001 0.000 0.005 0.002"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "segm_mAP": 0.031, "segm_mAP_50": 0.071, "segm_mAP_75": 0.021, "segm_mAP_s": 0.0, "segm_mAP_m": 0.029, "segm_mAP_l": 0.044, "segm_mAP_copypaste": "0.031 0.071 0.021 0.000 0.029 0.044"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "segm_mAP": 0.109, "segm_mAP_50": 0.233, "segm_mAP_75": 0.091, "segm_mAP_s": 0.0, "segm_mAP_m": 0.155, "segm_mAP_l": 0.116, "segm_mAP_copypaste": "0.109 0.233 0.091 0.000 0.155 0.116"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "segm_mAP": 0.249, "segm_mAP_50": 0.425, "segm_mAP_75": 0.261, "segm_mAP_s": 0.0, "segm_mAP_m": 0.329, "segm_mAP_l": 0.268, "segm_mAP_copypaste": "0.249 0.425 0.261 0.000 0.329 0.268"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "segm_mAP": 0.278, "segm_mAP_50": 0.486, "segm_mAP_75": 0.286, "segm_mAP_s": 0.0, "segm_mAP_m": 0.299, "segm_mAP_l": 0.299, "segm_mAP_copypaste": "0.278 0.486 0.286 0.000 0.299 0.299"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "segm_mAP": 0.353, "segm_mAP_50": 0.576, "segm_mAP_75": 0.421, "segm_mAP_s": 0.006, "segm_mAP_m": 0.359, "segm_mAP_l": 0.385, "segm_mAP_copypaste": "0.353 0.576 0.421 0.006 0.359 0.385"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "segm_mAP": 0.41, "segm_mAP_50": 0.605, "segm_mAP_75": 0.497, "segm_mAP_s": 0.012, "segm_mAP_m": 0.233, "segm_mAP_l": 0.48, "segm_mAP_copypaste": "0.410 0.605 0.497 0.012 0.233 0.480"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.001, "segm_mAP": 0.44, "segm_mAP_50": 0.612, "segm_mAP_75": 0.525, "segm_mAP_s": 0.019, "segm_mAP_m": 0.258, "segm_mAP_l": 0.512, "segm_mAP_copypaste": "0.440 0.612 0.525 0.019 0.258 0.512"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.001, "segm_mAP": 0.446, "segm_mAP_50": 0.619, "segm_mAP_75": 0.513, "segm_mAP_s": 0.018, "segm_mAP_m": 0.27, "segm_mAP_l": 0.522, "segm_mAP_copypaste": "0.446 0.619 0.513 0.018 0.270 0.522"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.001, "segm_mAP": 0.486, "segm_mAP_50": 0.649, "segm_mAP_75": 0.577, "segm_mAP_s": 0.013, "segm_mAP_m": 0.254, "segm_mAP_l": 0.568, "segm_mAP_copypaste": "0.486 0.649 0.577 0.013 0.254 0.568"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.001, "segm_mAP": 0.51, "segm_mAP_50": 0.647, "segm_mAP_75": 0.58, "segm_mAP_s": 0.013, "segm_mAP_m": 0.294, "segm_mAP_l": 0.595, "segm_mAP_copypaste": "0.510 0.647 0.580 0.013 0.294 0.595"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.001, "segm_mAP": 0.537, "segm_mAP_50": 0.661, "segm_mAP_75": 0.592, "segm_mAP_s": 0.013, "segm_mAP_m": 0.351, "segm_mAP_l": 0.618, "segm_mAP_copypaste": "0.537 0.661 0.592 0.013 0.351 0.618"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.001, "segm_mAP": 0.555, "segm_mAP_50": 0.689, "segm_mAP_75": 0.628, "segm_mAP_s": 0.011, "segm_mAP_m": 0.415, "segm_mAP_l": 0.637, "segm_mAP_copypaste": "0.555 0.689 0.628 0.011 0.415 0.637"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.001, "segm_mAP": 0.557, "segm_mAP_50": 0.671, "segm_mAP_75": 0.608, "segm_mAP_s": 0.008, "segm_mAP_m": 0.419, "segm_mAP_l": 0.649, "segm_mAP_copypaste": "0.557 0.671 0.608 0.008 0.419 0.649"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.001, "segm_mAP": 0.574, "segm_mAP_50": 0.699, "segm_mAP_75": 0.618, "segm_mAP_s": 0.02, "segm_mAP_m": 0.393, "segm_mAP_l": 0.663, "segm_mAP_copypaste": "0.574 0.699 0.618 0.020 0.393 0.663"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.001, "segm_mAP": 0.597, "segm_mAP_50": 0.716, "segm_mAP_75": 0.69, "segm_mAP_s": 0.022, "segm_mAP_m": 0.435, "segm_mAP_l": 0.683, "segm_mAP_copypaste": "0.597 0.716 0.690 0.022 0.435 0.683"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.001, "segm_mAP": 0.614, "segm_mAP_50": 0.741, "segm_mAP_75": 0.668, "segm_mAP_s": 0.02, "segm_mAP_m": 0.347, "segm_mAP_l": 0.72, "segm_mAP_copypaste": "0.614 0.741 0.668 0.020 0.347 0.720"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.001, "segm_mAP": 0.625, "segm_mAP_50": 0.775, "segm_mAP_75": 0.714, "segm_mAP_s": 0.018, "segm_mAP_m": 0.456, "segm_mAP_l": 0.71, "segm_mAP_copypaste": "0.625 0.775 0.714 0.018 0.456 0.710"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.001, "segm_mAP": 0.624, "segm_mAP_50": 0.742, "segm_mAP_75": 0.689, "segm_mAP_s": 0.03, "segm_mAP_m": 0.418, "segm_mAP_l": 0.719, "segm_mAP_copypaste": "0.624 0.742 0.689 0.030 0.418 0.719"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.001, "segm_mAP": 0.658, "segm_mAP_50": 0.786, "segm_mAP_75": 0.746, "segm_mAP_s": 0.022, "segm_mAP_m": 0.441, "segm_mAP_l": 0.749, "segm_mAP_copypaste": "0.658 0.786 0.746 0.022 0.441 0.749"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.001, "segm_mAP": 0.681, "segm_mAP_50": 0.795, "segm_mAP_75": 0.762, "segm_mAP_s": 0.0, "segm_mAP_m": 0.434, "segm_mAP_l": 0.783, "segm_mAP_copypaste": "0.681 0.795 0.762 0.000 0.434 0.783"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.001, "segm_mAP": 0.689, "segm_mAP_50": 0.8, "segm_mAP_75": 0.769, "segm_mAP_s": 0.019, "segm_mAP_m": 0.431, "segm_mAP_l": 0.791, "segm_mAP_copypaste": "0.689 0.800 0.769 0.019 0.431 0.791"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.001, "segm_mAP": 0.682, "segm_mAP_50": 0.8, "segm_mAP_75": 0.749, "segm_mAP_s": 0.0, "segm_mAP_m": 0.444, "segm_mAP_l": 0.784, "segm_mAP_copypaste": "0.682 0.800 0.749 0.000 0.444 0.784"}
