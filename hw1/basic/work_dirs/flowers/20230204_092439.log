2023-02-04 09:24:39,613 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 12.2.0-3ubuntu1) 12.2.0
PyTorch: 1.10.1+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2+cu113
OpenCV: 4.5.4
MMCV: 1.5.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-04 09:24:39,613 - mmcls - INFO - Distributed training: False
2023-02-04 09:24:39,669 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data',
        ann_file='data/flower_dataset/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='ImageNet',
        data_prefix='data',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='ImageNet',
        data_prefix='data',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0125, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/flower'
gpu_ids = [0]

2023-02-04 09:24:39,669 - mmcls - INFO - Set random seed to 1751979985, deterministic: False
2023-02-04 09:24:39,760 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 09:24:39,840 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 09:24:42,268 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023-02-04 09:24:42,307 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([5, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 09:24:42,307 - mmcls - INFO - Start running, host: richardz@Trident-X, work_dir: /home/richardz/openmmlab/mmclassification/work_dirs/flower
2023-02-04 09:24:42,308 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 09:24:42,308 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-04 09:24:42,308 - mmcls - INFO - Checkpoints will be saved to /home/richardz/openmmlab/mmclassification/work_dirs/flower by HardDiskBackend.
2023-02-04 09:24:50,043 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 09:24:50,838 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 60.6643, accuracy_top-5: 100.0000
2023-02-04 09:24:58,365 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 09:24:59,123 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 69.0559, accuracy_top-5: 100.0000
2023-02-04 09:25:06,660 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 09:25:07,409 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 70.8042, accuracy_top-5: 100.0000
2023-02-04 09:25:14,950 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 09:25:15,702 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 73.9510, accuracy_top-5: 100.0000
2023-02-04 09:25:23,242 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 09:25:23,989 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 90.5594, accuracy_top-5: 100.0000
2023-02-04 09:25:31,545 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 09:25:32,291 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-04 09:25:39,861 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 09:25:40,610 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 90.7343, accuracy_top-5: 100.0000
2023-02-04 09:25:48,178 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 09:25:48,928 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 86.5385, accuracy_top-5: 100.0000
2023-02-04 09:25:56,497 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 09:25:57,247 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-04 09:26:04,808 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 09:26:05,558 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-04 09:26:13,122 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 09:26:13,872 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 85.6643, accuracy_top-5: 100.0000
2023-02-04 09:26:21,442 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 09:26:22,194 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 90.3846, accuracy_top-5: 100.0000
2023-02-04 09:26:29,767 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 09:26:30,517 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-04 09:26:38,087 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 09:26:38,835 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 90.2098, accuracy_top-5: 100.0000
2023-02-04 09:26:46,407 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 09:26:47,161 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-04 09:26:54,728 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 09:26:55,475 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-04 09:27:03,056 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 09:27:03,805 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-04 09:27:11,377 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 09:27:12,128 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 09:27:19,700 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 09:27:20,448 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-04 09:27:28,014 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 09:27:28,768 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 09:27:36,343 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 09:27:37,093 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 09:27:44,670 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 09:27:45,416 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 09:27:52,997 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 09:27:53,747 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 09:28:01,328 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 09:28:02,076 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 89.1608, accuracy_top-5: 100.0000
2023-02-04 09:28:09,654 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 09:28:10,406 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 09:28:17,992 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 09:28:18,746 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 09:28:26,324 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 09:28:27,076 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-04 09:28:34,654 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 09:28:35,400 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-04 09:28:42,978 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 09:28:43,729 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 09:28:51,311 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 09:28:52,057 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 09:28:59,645 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-04 09:29:00,397 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 09:29:07,980 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-04 09:29:08,728 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 09:29:16,311 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-04 09:29:17,062 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:29:24,639 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-04 09:29:25,390 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:29:32,972 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-04 09:29:33,724 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:29:41,310 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-04 09:29:42,062 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:29:49,643 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-04 09:29:50,392 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:29:57,972 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-04 09:29:58,723 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:30:06,301 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-04 09:30:07,052 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:30:14,637 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-04 09:30:15,392 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:30:22,975 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-04 09:30:23,724 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:30:31,313 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-04 09:30:32,066 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:30:39,651 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-04 09:30:40,400 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:30:47,986 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-04 09:30:48,737 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:30:56,317 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-04 09:30:57,072 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:31:04,656 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-04 09:31:05,409 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:31:12,998 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-04 09:31:13,751 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 09:31:21,338 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-04 09:31:22,089 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 09:31:29,686 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-04 09:31:30,438 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 09:31:38,038 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-04 09:31:38,792 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:31:46,372 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-04 09:31:47,125 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:31:54,708 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-04 09:31:55,458 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:32:03,054 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-04 09:32:03,810 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-04 09:32:11,395 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-04 09:32:12,148 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:32:19,745 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-04 09:32:20,493 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 09:32:28,077 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-04 09:32:28,835 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:32:36,408 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-04 09:32:37,155 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:32:44,739 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-04 09:32:45,493 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:32:53,071 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-04 09:32:53,819 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:33:01,397 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-04 09:33:02,145 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:33:09,723 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-04 09:33:10,474 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:33:18,057 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-04 09:33:18,809 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:33:26,387 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-04 09:33:27,138 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:33:34,719 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-04 09:33:35,473 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:33:43,063 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-04 09:33:43,816 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:33:51,402 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-04 09:33:52,158 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:33:59,740 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-04 09:34:00,491 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:34:08,071 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-04 09:34:08,823 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:34:16,404 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-04 09:34:17,155 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:34:24,734 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-04 09:34:25,485 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:34:33,064 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-04 09:34:33,816 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:34:41,400 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-04 09:34:42,148 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:34:49,725 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-04 09:34:50,477 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 09:34:58,060 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-04 09:34:58,812 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:35:06,386 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-04 09:35:07,138 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:35:14,721 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-04 09:35:15,472 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-04 09:35:23,049 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-04 09:35:23,797 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 09:35:31,375 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-04 09:35:32,125 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:35:39,709 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-04 09:35:40,460 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:35:48,040 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-04 09:35:48,789 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:35:56,369 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-04 09:35:57,121 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:36:04,700 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-04 09:36:05,449 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:36:13,032 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-04 09:36:13,783 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:36:21,366 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-04 09:36:22,116 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:36:29,686 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-04 09:36:30,439 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-04 09:36:38,019 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-04 09:36:38,774 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:36:46,354 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-04 09:36:47,104 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 09:36:54,682 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-04 09:36:55,432 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:37:03,013 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-04 09:37:03,767 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:37:11,349 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-04 09:37:12,099 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-04 09:37:19,675 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-04 09:37:20,432 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:37:28,012 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-04 09:37:28,763 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-04 09:37:36,340 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-04 09:37:37,090 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:37:44,671 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-04 09:37:45,421 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:37:53,006 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-04 09:37:53,763 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:38:01,359 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-04 09:38:02,115 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:38:09,694 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-04 09:38:10,449 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:38:18,022 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-04 09:38:18,776 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-04 09:38:26,354 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-04 09:38:27,106 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-04 09:38:34,691 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-04 09:38:35,445 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
